import threading  # Importa a biblioteca para trabalhar com threads (execu√ß√£o simult√¢nea)
import time       # Importa a biblioteca para controlar o tempo de espera
import random     # Importa a biblioteca para gerar n√∫meros aleat√≥rios

numero_filosofos = 5  # Define que haver√° 5 fil√≥sofos
execucao = 10  # Define o tempo que o programa vai rodar, em segundos

# Lista com os nomes dos fil√≥sofos
nomes = ["S√≥crates", "Plat√£o", "Arist√≥teles", "Descartes", "Nietzsche"]

# Lista que armazena o estado de cada fil√≥sofo (pensando inicialmente)
estados = ["pensando"] * numero_filosofos

# Lista de garfos, representados por bloqueios (locks) para garantir acesso exclusivo
garfos = [threading.Lock() for _ in range(numero_filosofos)]

# Lista para verificar qual fil√≥sofo est√° usando cada garfo (inicialmente todos est√£o livres)
uso_garfos = [None] * numero_filosofos  

# Mutex para garantir que apenas um fil√≥sofo acesse os estados ao mesmo tempo
mutex_estado = threading.Lock()

# Fun√ß√£o para mostrar a situa√ß√£o atual dos fil√≥sofos e dos garfos
def mostrar_situacao():
    with mutex_estado:  # Garante que apenas um fil√≥sofo possa acessar a situa√ß√£o por vez
        # Mostrar o estado atual de cada fil√≥sofo
        for i in range(numero_filosofos):
            print(f"{nomes[i]:<12}: {estados[i]}")

        # Mostrar quais fil√≥sofos est√£o comendo e quais garfos est√£o sendo usados
        garfos_usados = []  # Lista para armazenar os fil√≥sofos comendo e os garfos que est√£o usando
        for i in range(numero_filosofos):
            if estados[i] == "comendo":  # Se o fil√≥sofo est√° comendo
                garfos_usados.append((i + 1, uso_garfos[i]))  # Adiciona o fil√≥sofo e os garfos que ele est√° usando

        # Exibe a informa√ß√£o de quem est√° comendo e quais garfos est√£o sendo usados
        for garfo, filosofo in garfos_usados:
            print(f"üçΩÔ∏è {nomes[filosofo]} est√° comendo com os garfos {garfo} e {garfo + 1}")

        # Mostrar quais garfos est√£o livres (n√£o sendo usados por nenhum fil√≥sofo)
        livres = [i + 1 for i in range(numero_filosofos) if uso_garfos[i] is None]
        if livres:  # Se houver garfos livres
            print(f"üç¥ Garfo(s) {', '.join(map(str, livres))} livre(s)")

        print("-" * 40)  # Linha de separa√ß√£o visual

# Fun√ß√£o que simula a a√ß√£o de cada fil√≥sofo
def filosofo(id):
    inicio = time.time()  # Marca o tempo de in√≠cio
    while time.time() - inicio < execucao:  # Executa enquanto o tempo n√£o passar do limite
        with mutex_estado:  # Garante que apenas um fil√≥sofo acesse o estado ao mesmo tempo
            estados[id] = "pensando"  # Marca o fil√≥sofo como pensando
        print(f"üß† {nomes[id]} est√° pensando.")  # Exibe que o fil√≥sofo est√° pensando
        time.sleep(random.uniform(0.5, 1.5))  # O fil√≥sofo pensa por um tempo aleat√≥rio

        # Decide a ordem dos garfos para evitar deadlock
        if id % 2 == 0:  # Se o id do fil√≥sofo for par
            primeiro = id
            segundo = (id + 1) % numero_filosofos  # O segundo garfo ser√° o pr√≥ximo fil√≥sofo
        else:  # Se o id for √≠mpar
            primeiro = (id + 1) % numero_filosofos
            segundo = id  # O segundo garfo ser√° o fil√≥sofo atual

        # Tenta pegar os garfos (garante que o fil√≥sofo pega garfos exclusivos)
        with garfos[primeiro]:
            with garfos[segundo]:
                with mutex_estado:  # Garante que apenas um fil√≥sofo acesse o estado ao mesmo tempo
                    estados[id] = "comendo"  # Marca o fil√≥sofo como comendo
                    uso_garfos[primeiro] = id  # Marca que o primeiro garfo est√° sendo usado pelo fil√≥sofo
                    uso_garfos[segundo] = id   # Marca que o segundo garfo est√° sendo usado pelo fil√≥sofo

                # Exibe que o fil√≥sofo est√° comendo com os garfos que pegou
                print(f"üçΩÔ∏è {nomes[id]} est√° comendo com os garfos {primeiro + 1} e {segundo + 1}.")
                mostrar_situacao()  # Exibe a situa√ß√£o atual ap√≥s o fil√≥sofo come√ßar a comer
                time.sleep(random.uniform(0.5, 1.5))  # O fil√≥sofo come por um tempo aleat√≥rio

                # Libera os garfos ap√≥s o fil√≥sofo terminar de comer
                with mutex_estado:
                    uso_garfos[primeiro] = None  # Libera o primeiro garfo
                    uso_garfos[segundo] = None   # Libera o segundo garfo
                    estados[id] = "terminou"  # Marca que o fil√≥sofo terminou de comer

    # Exibe a situa√ß√£o final ap√≥s o fil√≥sofo terminar
    mostrar_situacao()

# Cria uma lista de threads (uma para cada fil√≥sofo)
threads = []
for i in range(numero_filosofos):
    t = threading.Thread(target=filosofo, args=(i,))  # Cria uma thread para cada fil√≥sofo
    threads.append(t)
    t.start()  # Inicia a execu√ß√£o da thread

# Espera todas as threads terminarem
for t in threads:
    t.join()

